pipeline {
    agent any

    environment {
        POSTGRES_CONTAINER = "postgres-db"
        APP_CONTAINER = "cloudit-app"
        NETWORK_NAME = "cloudit-network"
        DOCKER_IMAGE = "cloudit-app:latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Application') {
            steps {
                echo 'Building Docker image for Spring Boot app...'
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }

        stage('Remove Existing Containers (if any)') {
            steps {
                echo 'Removing old containers if they exist...'
                sh '''
                    docker rm -f ${POSTGRES_CONTAINER} || true
                    docker rm -f ${APP_CONTAINER} || true
                '''
            }
        }

        stage('Start PostgreSQL') {
            steps {
                echo 'Starting PostgreSQL container...'
                sh '''
                    docker run -d \
                        --name ${POSTGRES_CONTAINER} \
                        --network ${NETWORK_NAME} \
                        --env-file .env \
                        -p 5432:5432 \
                        -v postgres_data:/var/lib/postgresql/data \
                        postgres:latest
                '''
                sleep 10
            }
        }

        stage('Run Spring Boot App') {
            steps {
                echo 'Starting Spring Boot app container...'
                sh '''
                    docker run -d \
                        --name ${APP_CONTAINER} \
                        --network ${NETWORK_NAME} \
                        --env-file .env \
                        -p 9090:8080 \
                        ${DOCKER_IMAGE}
                '''
            }
        }

        stage('Deployment Successful') {
            steps {
                echo 'âœ… Deployment completed successfully!'
            }
        }
    }

    post {
        always {
            echo 'Checking running containers...'
            sh 'docker ps -a'
        }
    }
}
